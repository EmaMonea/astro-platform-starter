---
import Layout from '../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';
import Papa from 'papaparse';

const classifica = Object.values(import.meta.glob('./posts/blog/classifiche/*.md', { eager: true }));
const csvPaths = classifica.map((item) => item.frontmatter.thumbnail);

const tables = csvPaths.map((csvPath) => {
    const content = fs.readFileSync(path.join(process.cwd(), 'public', csvPath), 'utf-8');
    const fileName = path.basename(csvPath, '.csv');
    return {
        title: fileName,
        data: Papa.parse(content, {
            header: true,
            delimiter: ',',
            skipEmptyLines: true
        }).data
    };
});


/*const matchFrontMatter = matches.frontmatter;
const { title } = matchFrontMatter.title;*/
const explainer = `
An Astro website can go way beyond static pages - on the right platform.

Netlify supports not only [Streaming SSR](https://docs.astro.build/en/guides/server-side-rendering/#html-streaming) and fast [Edge Middleware](https://docs.astro.build/en/guides/middleware/), but also [on-demand revalidation](https://www.netlify.com/blog/cache-tags-and-purge-api-on-netlify/) and [stale-while-revalidate](https://www.netlify.com/blog/swr-and-fine-grained-cache-control/). 
Any page or data can be rebuilt only when needed, without site visitors ever getting a performance hit.
`;
---

<Layout title="Welcome to Astro.">
    <main>
        <h2>Main component</h2>
        <section>
            {
                tables.map((table) => {
                    return(
                        <h3>{table.title}</h3>
                        <table>
                            <thead>
                            <tr>
                                <th>Pos</th>
                                <th>Giocatore 1</th>
                                <th>Giocatore 2</th>
                                <th>%</th>
                                <th>Punti</th>
                            </tr>
                            </thead>
                            <tbody>
                            {table.data.map((row:any) => (
                                <tr>
                                <td>{row.Pos}</td>
                                <td>{row.Classifica}</td>
                                <td>{row['']}</td>
                                <td>{row['%']}</td>
                                <td>{row.Punti}</td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    )
                })
            }
        </section>
    </main>
</Layout>
<style>
    main {
        min-height: 70%;
        background-color: aliceblue;
    }
    .post {
        padding: 5px;
        margin: 5px;
        border-radius: 5px;
        color: black;
        background-color: lightblue;
    }
    section {
        max-width: 300px;
    }
</style>
